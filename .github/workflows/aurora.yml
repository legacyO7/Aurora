# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Aurora CI

on:

  push:
    branches:
      - stable
      - beta

jobs:
  build:
    name: "Build Aurora"
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2.4.0
      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2.6.1
        with:
          channel: 'stable'

      - name: Install Linux build tools
        run: sudo apt-get update && sudo apt-get install clang cmake ninja-build pkg-config libgtk-3-dev squashfs-tools libfuse2 patchelf rpm desktop-file-utils

      - name: Enable desktop
        run: flutter config --enable-linux-desktop

      - name: Install Cider
        run: flutter pub global activate cider

      - name: Get Version
        id: version_id
        run: echo "::set-output name=version::$(cider version)"

      - name: Get Changelog
        id: changelog_id
        run: |
          changelogs=$(cat ./changelog.txt )
           changelogs="${changelogs//'%'/'%25'}"
           changelogs="${changelogs//$'\n'/'%0A'}"
           changelogs="${changelogs//$'\r'/'%0D'}"
          echo ::set-output name=changelog::$changelogs

      - name: Get packages
        run: flutter pub get

      - name: Flutter build app
        run: flutter build linux

      - name: build RPM
        run: |
          rpmversion=$(cut -d- -f 1 <<< ${{ steps.version_id.outputs.version }})
          cp -rf build/linux/x64/release/bundle rpmbuild/SOURCES/

          cd rpmbuild/SOURCES/bundle/lib
          patchelf --set-rpath '$ORIGIN' libscreen_retriever_plugin.so
          patchelf --set-rpath '$ORIGIN' libwindow_manager_plugin.so
          patchelf --set-rpath '$ORIGIN' liburl_launcher_linux_plugin.so
          patchelf --set-rpath '$ORIGIN' libbitsdojo_window_linux_plugin.so
          cd ../../
          cp aurora.desktop bundle/
          mv bundle aurora-$rpmversion
          tar --create --file aurora-"$rpmversion".tar.gz aurora-$rpmversion

          cd ..
          sed -i "s/aurora_ver/$rpmversion/g" SPECS/aurora.spec
          cd ..

          cp -rf rpmbuild /home/runner/
          rpmbuild -bb rpmbuild/SPECS/aurora.spec


      - name: Install AppImage Builder
        run: |
          wget -O appimage-builder-x86_64.AppImage https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.0.0-beta.1/appimage-builder-1.0.0-677acbd-x86_64.AppImage
          chmod +x appimage-builder-x86_64.AppImage
          sudo mv appimage-builder-x86_64.AppImage /usr/local/bin/appimage-builder

      - name: Build AppImage
        run:  appimage-builder --skip-tests

      - name: create build directory
        run: |
          mkdir builddir
          mv legacy07-latest-x86_64.AppImage builddir/aurora-linux-${{ steps.version_id.outputs.version }}.AppImage
          cp -rf /home/runner/rpmbuild/RPMS/x86_64/aurora-*.rpm builddir/
          cd builddir
          for file in *.rpm; do mv "$file" "${file/.rpm/-$(cut -d- -f 2 <<< ${{ steps.version_id.outputs.version }}).rpm}"; done
          cd ..



      - name: Upload files to GitHub release
        uses: svenstaro/upload-release-action@2.2.1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: builddir/*
          release_name: aurora-${{ steps.version_id.outputs.version }}
          tag: ${{ steps.version_id.outputs.version }}
          overwrite: true
          file_glob: true
          body:   ${{join(steps.run_tests.outputs.*, '\n')}}${{ steps.changelog_id.outputs.changelog }}
