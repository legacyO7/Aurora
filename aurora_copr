#!/bin/bash

outdir=$1
echo $outdir


checkFlutter() {
if command -v flutter &> /dev/null
    then
         echo installed
         buildAurora
    else
        installFlutter
fi
}

installFlutter(){

echo installing flutter

dnf -y install patchelf rpmdevtools rpmlint gtk3-devel xz-libs git cmake ninja-build clang desktop-file-utils glibc

git clone https://github.com/flutter/flutter.git ~/flutter
export PATH=$HOME/.pub-cache/bin:$HOME/flutter/bin:$PATH

flutter config --enable-linux-desktop
buildAurora

}


buildAurora(){
echo building aurora
flutter clean
flutter pub get
flutter pub global activate cider
flutter build linux

buildrpm

}

buildrpm(){
rpmversion=$(cut -d- -f 1 <<< $(cider version))

mkdir -p rpmbuild/SOURCES
cp -rf build/linux/x64/release/bundle rpmbuild/SOURCES/
cd rpmbuild/SOURCES/bundle/lib
patchelf --set-rpath '$ORIGIN' libscreen_retriever_plugin.so
patchelf --set-rpath '$ORIGIN' libwindow_manager_plugin.so
patchelf --set-rpath '$ORIGIN' liburl_launcher_linux_plugin.so
patchelf --set-rpath '$ORIGIN' libbitsdojo_window_linux_plugin.so
cd ../../

mv  bundle aurora-$rpmversion
tar --create --file aurora-"$rpmversion".tar.gz aurora-$rpmversion

cd ..
sed -i "s/aurora_ver/$rpmversion/g" SPECS/aurora.spec
cd ..

rm -rf build
mv rpmbuild build
cp -rf build ~/
rpmbuild -bs build/SPECS/aurora.spec

cp -r $HOME/build/SRPMS/* $outdir

}

if [ $# -eq 0 ]
  then
    echo "Nop. that's not how it works"
  else
    checkFlutter
fi
